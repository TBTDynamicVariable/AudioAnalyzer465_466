1. Remove the files that don't matter for our purposes
2. Integrate the needed files into WowWee chip, 
3. Be happy af

Activities that definitely don't matter*:
AnalyzeOneBufferForWz
AnalyzerGraphic
AxixTickLabels
ColorMapArray
FPSCounter
GridLabel



ACtivities that might matter:
SpectrogramPlot
SineGenerator
ScreenPhysicalMapping
InfoRecActivity
MyPreferences
RangeViewDialogC
RecorderMOnitor
SbNumFormat
SelectorText
SpectrogramBMP
SpectrumPlot
SamplingLoop
STFT





Definitely matters:
AnalyzerParameters
AnalyzerActivity
AnalyzerUtil
AnalyzerViews(Used by Sampling loop which matters, but the rest of it is aestetic nonsense. )
besselCal
CalibrationLoad



________________________________________________________________________________________________
              AnalyzeOneBufferForWz
This is actually just empty, assumedly not implemented thing, can safely delete it with no problems




________________________________________________________________________________________________
              AnalyzerActivity
  Direct depencencies:
  - AnalyzerViews
  - AnalyzerParameters
  - AnalyzerGraphic
  - Calibration load(225, )

What matters: How we save files, how we call fft measure, analyze, and save - Very small part of this activity

More detailed run through:
Lines 0-122 - Initial and OnCreate function:
Gets memory allocation for phone, relays that info to the user. Creates the view - and sets them using the AnalyzerParameters activity.

Lines 130-144 - OnResume:
Resumes operation, really. overwrites default on resume funcion, Starts sampling and loads the saved preferences gotted from initial run of app.

Lines 146-154 - onPause:
Overwrites standard, stops sampling, doesn't close window

Through Line 195, we have android app functionality stuff. What happens when we open the program, close it, ect. Not exciting

Line 196- 214 - selectFile: (Do not know where this function is ever called)
Program looks at the users default filemanagement system. Error checks with toast. Has two modes, requesting audio file and calibration file

Lines 225-238 - fillFftCalibration
Gathers the data used for Fourier transform, uses both an AnalyzerParameter object and a CalibrationLoad one. This and the next function make heavy use of Log.(method) - need to do some reading up on log

Lines 257 - 281 - Menu stuff:
Almost defnitely some generated code through AS, Goes through various menu funcitonality, but this is code we can remove if we find settings that work best for our purposes. Simply hardcode the best settings for our robot.


Lines 275 - 358 - Onlcick for AdapterView: TODO:
This is a menu series for selection on the way the fft is taken and calculated - This code is a good deal more complicated, and susing out what we will be using will be a little more complicated that the stuff above, however, it can be hardcoded for us

Lines 363-390 - LoadPrefForView:
Takes the menu options the user used before and implement those when a new instance of the program is opened. For us, we need to figure out how to remove this code, not adapt it. We can hardcode the preferences we want in order to best record OUR audio. 


Lines 392-463 - LoadPreferences:
Much like above, LoadPrefForView, utilizes AnalyzerParameters, View, and Graphics. Graph view, spectrum display, all of the things I don't particularly care about. All visual part of the app, which I think we want to avoice, simply getting the utility of the app. 


Lines 465-476 - stickToMEasureMode and Cancel Measure:
These both make it so the probram has checks at certain points that require recording/measuring and displaying that data. 

Lines 477-487 - IsInGraphV and shopPopUp:
Another set of visual exclusive functions that we don't care too much about. Both functions make exclusive use of analyzerViews object.

Lines 494 - 567  -  AnalyzerGestureListener:
Detects certain phone sensors that depend on motion? I think? For the app, we are override an onDown motion event, so that the app does what we want it to, rather than what is typical for this happening. For instance, double tapping and holding down a button on screen have typical implementation, and the apps creator wanted to use a different functionality. 

Lines 569 - 619 (- 677, really) - Various functions relating to user input:
These all rever to user selection interactions with the audio analyzer app. For us, I think it best do make the user functionality.... A timed thing, or a button push (perhaps?) and then record the audio and analyze it. So this us not particularly important.


Lines 679 - 684 - OnLongClick:
Press and hold copies string of obj

Lines 688 - 693 - onClick:
overrides typical click function to also disregard the graph being displayed by analyzerViews

Lines 695 - 735 - Setting up the graph to display sonogram:
Stated above, gets graph ready for displaying the visualization of the audio being recorded. In the beginning it also sets up variables in order to save the data being recorded on the phone. @736 Audio sampling begins.  


Lines 741 - 790 - Recording audio permissions: 
In order to access parts of the android device NOT directly coded into the app, the android device must first ask user for the permissions. If the user gives them, we gucci, otherwise the app cannot perform its given directions. This part checks to make sure that the user HAS given permission. If they have not, the app tells them so and is like. "hey, please do the thing". Initial check @751 asks for audio permissions. @781, the same is done for storing information

Lines 794 - 829 - Determins results, does a thing with them:
What does it actually do to them? Well, it writes something to the log, and.... i Have no idea what that does yet. So, we'll figure it out eventually


Lines 837 - 895 - Changes display mode of the graph:
The graphs show an updated spectrogram, frequency scaling, or db plot. The views change dependin on that, as layed out in analyzerViews.graphView.(funciton). This function doesn't go into how the data is recorded, or how it is sent to the graph.

Lines 895 - end - Visit and the like:
These functions are that show the sub parts of the group - So, visiting a group, executing the command, I THINK thats how the Logs are used? Honestly, this part is a little beyond me rn. 



________________________________________________________________________________________________
            AnalyzerGraphic
This class is all about the graph. 
Dependancies:
SpectrumPlot
SpectrogramPlot

This activity interacts with the two dependencies, Spectro_Plot and Spectru_Plot. They might be called from places outside of this, but both plots use this to get the information appropriate for those plots, and place that into the graphic window. Merely going to be removed, I assume. Doesn't seem like it will provide too much functionality for us, as we don't want to keep the graphic interface of that part of the app, just the computational and memory accessing functionality. Going through it is a pretty easy trace, the functions are not detailed.

________________________________________________________________________________________________
            AnalyzerParameters
Class dependencies:
None - This code is used by other 

Lays out some of the more important functionality of the app - Sets up a lot of fourier variables and maths, gets audio source form computer

Lines 26-41:
Declaring variables - Asssuming this is used as analyzerParameter Objects in other places, and that is taken to obtain what operation is being performed by the program. 

Lines 49 - end - getAudioSourceNameFromIdPrepare:
You pass this a resource, it gets the string value from it, and then uses that string value as the audio source - and that is used when recording starts (BIG ASSUMPTION, I just don't know how else that will be used.)


________________________________________________________________________________________________
            AnalyzerUtil
 - Lost a bunch of stuff. Really not thrilled about it. BUtt. whatever. I have a few hours. Lets do. 

This is an important file. It does the pitch frequency conversion for the program, but some of that is purely aestetic. Doubt we'll be checking pitch against itself, rather the idea is to check frequencies with some level of tolerance. 

Additionally, validate audio rates for the recording device. That and getting the audio source Id. Aroudn line 175, the functions AnalyzerUtil and GetAllAudioSource are part of the audio source checking and confirmation. 

Lines 260-364
A combination of binary search and the is sorted function perform important data analysis functions, goes to the important pile. 
________________________________________________________________________________________________
            AnalyzerViews
Used by: Sampling Loop
Uses:
- so the default app has different modes you can select, depending on how you want the data displayed. This is the java file that manages most of that, and it's relevent to the project. 

Lines 165-168 Might be useful to find where the function is called, as well as the following toast(error check part). We don't want to tell the end user that the file has been saved, but we do want to do it during error checking. And the function itself tells us where the path is saved, so we want to find where the string is found that is passed to the function. 

The rest of these functions are mostly aestetic and do a lot of android specific manipulation of text boxes, pictures, and the like, buttons, popup menus, whatever. We don't care about it, 

IMPORTNT: Sampling loop, which is a vital chunk of code for us, makes use of the notify save and toast functions from AnalyzerViews

________________________________________________________________________________________________
              AxisTickLabels
 Used by:
 Uses:
 
 The graphs in android studio don't automatically have tick labels, so this chunk of code makes tick labels on the graph. We do not need. 



________________________________________________________________________________________________
            besselCaL
The only damn file that makes any kind of sense. who capitalizes EVER letter? Real silly. Anyway. This stays.
Includes a lot of the math that does the audio analysis. Works with "Chebyshev" Polynomials. Long story short, used by the app for analyzing recorded data. If we end up using tensor flow, this won't matter. 




________________________________________________________________________________________________
            Calibrationload
Loads the calibration file. If that fily doesn't exist, we make a new calibration file. What do we use that file for, you ask? I haven't the slightest idea. Though a lot of information is pulled from it. 

Keep file. 

________________________________________________________________________________________________
            ColorMapArray
Literally a list of hex colors. Actually kind of silly. Gave me a good chuckle. 




________________________________________________________________________________________________
            FPSCounter
This is a java file that aims to create an FPS counter. Not only is this aestetic only, it isn't actually implemented anywhere in the program. P sure we could just delete it and never have a problem. 



________________________________________________________________________________________________
            GridLabel


Lines 0-138
Starts off talking about the grid on which the waves are plotted. Different markers and value intervals are made depending on user selected setting of DB, or whatever. 
Does not perform any proper computation or saving function, just lays out the grid for UI purposes. 



________________________________________________________________________________________________
            InfoRecActivity



















